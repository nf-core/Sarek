includeConfig "../../subworkflows/local/prepare_variantannotation/nextflow.config"

process {
    // BCFTOOLS_ANNOTATE
    if (params.tools && params.tools.split(',').contains('bcfann')) {
        withName: '.*:VCF_ANNOTATE_BCFTOOLS:BCFTOOLS_ANNOTATE' {
            ext.args   = { '--output-type z' }
            ext.prefix = { input.baseName - '.vcf' + '_BCF.ann' }
            publishDir = [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/annotation/${meta.variantcaller ? meta.variantcaller + '/': ''}${meta.id}/" },
                    pattern: "*{gz}"
                ]
        }
    }

    // SNPEFF_SNPEFF
    if (params.tools && (params.tools.split(',').contains('snpeff') || params.tools.split(',').contains('merge'))) {
        withName: 'SNPEFF_SNPEFF' {
            ext.args   = { '-nodownload -canon -v' }
            ext.prefix = { vcf.baseName - '.vcf' + '_snpEff' }
            publishDir = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/reports/snpeff/${meta.variantcaller ? meta.variantcaller + '/': ''}${meta.id}/" },
                    pattern: "*{csv,html,genes.txt}",
                    saveAs: { params.tools.split(',').contains('snpeff') ? it : null }
                ]
            ]
        }
    }

    // ENSEMBLVEP_VEP
    if (params.tools && (params.tools.split(',').contains('vep') || params.tools.split(',').contains('merge'))) {
        withName: 'ENSEMBLVEP_VEP' {
            ext.args   = { [
                // If just VEP: <vcf prefix>_VEP.ann.summary.html
                "--stats_file ${vcf.baseName - '.vcf' + '_VEP.ann'}.summary.html",
                (params.vep_dbnsfp && params.dbnsfp && !params.dbnsfp_consequence)    ? "--plugin dbNSFP,${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"                                              : '',
                (params.vep_dbnsfp && params.dbnsfp && params.dbnsfp_consequence)     ? "--plugin dbNSFP,'consequence=${params.dbnsfp_consequence}',${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"   : '',
                (params.vep_loftee)                                                   ? "--plugin LoF,loftee_path:/usr/local/share/ensembl-vep-${params.vep_version}" : '',
                (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? "--plugin SpliceAI,snv=${params.spliceai_snv.split("/")[-1]},indel=${params.spliceai_indel.split("/")[-1]}"            : '',
                (params.vep_spliceregion)                                             ? '--plugin SpliceRegion'                                                                                                : '',
                (params.vep_out_format)                                               ? "--${params.vep_out_format}"                                                                                           : '--vcf',
                (params.vep_custom_args)                                              ?: ''
            ].join(' ').trim() }
            // If just VEP: <vcf prefix>_VEP.ann.vcf
            ext.prefix = { vcf.baseName - '.vcf' + '_VEP.ann' }
            publishDir = [
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/reports/EnsemblVEP/${meta.variantcaller ? meta.variantcaller + '/': ''}${meta.id}/" },
                    pattern: "*html"
                ],
                [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/annotation/${meta.variantcaller ? meta.variantcaller + '/': ''}${meta.id}/" },
                    pattern: "*{gz}"
                ]
            ]
        }
    }

    // SNPEFF_SNPEFF THEN ENSEMBLVEP_VEP (AKA MERGE)
    if (params.tools && params.tools.split(',').contains('merge')) {
        withName: '.*:VCF_ANNOTATE_MERGE:ENSEMBLVEP_VEP' {
            ext.args   = { [
                // If merge: <vcf prefix>_snpEff_VEP.ann.summary.html
                "--stats_file ${vcf.baseName - '.ann.vcf' + '_VEP.ann'}.summary.html",
                (params.vep_dbnsfp && params.dbnsfp && !params.dbnsfp_consequence)    ? "--plugin dbNSFP,${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"                                              : '',
                (params.vep_dbnsfp && params.dbnsfp && params.dbnsfp_consequence)     ? "--plugin dbNSFP,'consequence=${params.dbnsfp_consequence}',${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"   : '',
                (params.vep_loftee)                                                   ? "--plugin LoF,loftee_path:/usr/local/share/ensembl-vep-${params.vep_version}" : '',
                (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? "--plugin SpliceAI,snv=${params.spliceai_snv.split("/")[-1]},indel=${params.spliceai_indel.split("/")[-1]}"            : '',
                (params.vep_spliceregion)                                             ? '--plugin SpliceRegion'                                                                                                : '',
                (params.vep_out_format)                                               ? "--${params.vep_out_format}"                                                                                           : '--vcf',
                (params.vep_custom_args)                                              ?: ''
            ].join(' ').trim() }
            // If merge: <vcf prefix>_snpEff_VEP.ann.vcf
            ext.prefix = { vcf.baseName - '.ann.vcf' + '_VEP.ann' }
        }
    }

    // TABIX COMPRESS/INDEX
    if (params.tools && (params.tools.split(',').contains('snpeff') || params.tools.split(',').contains('vep') || params.tools.split(',').contains('merge') || params.tools.split(',').contains('bcfann'))) {
        withName: '.*:.*:(TABIX_BGZIPTABIX|TABIX_TABIX)' {
            ext.prefix = { input.name - '.vcf' }
            publishDir = [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/annotation/${meta.variantcaller ? meta.variantcaller + '/': ''}${meta.id}/" },
                    pattern: "*{gz.tbi}"
            ]
        }
    }

    if (params.tools && (params.tools.split(',').contains('snpeff') || params.tools.split(',').contains('merge'))) {
        withName: '.*:VCF_ANNOTATE_SNPEFF:TABIX_BGZIPTABIX' {
            publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.variantcaller ? meta.variantcaller + '/': ''}${meta.id}/" },
                pattern: "*{gz,gz.tbi}",
                saveAs: { params.tools.split(',').contains('snpeff') ? it : null }
            ]
        }
    }
}
