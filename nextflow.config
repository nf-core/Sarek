/*
========================================================================================
    nf-core/sarek Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    // Workflow flags:

    // Mandatory arguments
    input = null // No default input
    step = 'mapping' // Starts with mapping

    // Genome and references options
    genome = 'GRCh38'
    igenomes_base = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore = false
    genomes_base = null // Disabled by default
    save_reference = null // Built references not saved

    // Main options
    help = false
    no_intervals = false // Intervals will be built from the fasta file
    nucleotides_per_second = 1000 // Default interval size
    sentieon = false // Not using Sentieon by default
    skip_qc = null // All QC tools are used
    target_bed = false // No default TargetBED file for targeted sequencing
    tools = null // No default Variant_Calling or Annotation tools

    // Modify fastqs (trim/split)
    trim_fastq = false // No trimming
    clip_r1 = 0
    clip_r2 = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq = 0
    save_trimmed = false
    split_fastq = 0 // FASTQ files will not be split by default

    // Preprocessing
    aligner = 'bwa-mem'
    markdup_java_options = '"-Xms4000m -Xmx7g"' // Established values for markDuplicates memory consumption, see https://github.com/SciLifeLab/Sarek/pull/689 for details
    use_gatk_spark = false // GATK Spark implementation of their tools in local mode not used by default
    save_bam_mapped = false // Mapped BAMs not saved
    skip_markduplicates = false // Do not skip markDuplicates by default
    sequencing_center = null // No sequencing center to be written in BAM header in MapReads process

    //BQSR
    skip_bqsr = false

    // Variant Calling
    ascat_ploidy = null // Use default value
    ascat_purity = null // Use default value
    cf_coeff = 0.05                     // default value for Control-FREEC
    cf_contamination = null             // by default not specified in Control-FREEC
    cf_contamination_adjustment = false // by default we are not using this in Control-FREEC
    cf_ploidy = 2                       // you can use 2,3,4
    cf_window = null                    // by default we are not using this in Control-FREEC
    generate_gvcf = false // g.vcf are not produced by HaplotypeCaller by default
    no_strelka_bp = false // Strelka will use Manta candidateSmallIndels if available
    pon = false // No default PON (Panel of Normals) file for GATK Mutect2 / Sentieon TNscope
    pon_tbi = false // No default PON index for GATK Mutect2 / Sentieon TNscope
    ignore_soft_clipped_bases = false // no --dont-use-soft-clipped-bases for GATK Mutect2
    umi = false // no umi
    read_structure1 = null // no umi
    read_structure2 = null // no umi

    // Annotation
    annotate_tools = null // Only with --step annotate
    annotation_cache = false // Annotation cache disabled
    cadd_cache = null // CADD cache disabled
    cadd_indels = false // No CADD InDels file
    cadd_indels_tbi = false // No CADD InDels index
    cadd_wg_snvs = false // No CADD SNVs file
    cadd_wg_snvs_tbi = false // No CADD SNVs index
    genesplicer = null // genesplicer disabled within VEP
    snpeff_cache = null // No directory for snpEff cache
    vep_cache = null // No directory for VEP cache

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,modules'
    enable_conda               = false
    singularity_pull_docker_container = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                  = [:]
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/sarek custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/pipeline/sarek.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/sarek profiles: ${params.custom_config_base}/pipeline/sarek.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required else load custom genomes.config
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    includeConfig 'conf/genomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'nf-core/sarek'
    author          = 'Maxime Garcia, Szilveszter Juhos'
    homePage        = 'https://github.com/nf-core/sarek'
    description     = 'An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '3.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
