/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/sarek Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    // Input options
    input                           = null // No default input
    input_restart                   = null // No default automatic input
    step                            = 'mapping' // Starts with mapping

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    version                      = false
    modules_testdata_base_path   = 's3://ngi-igenomes/testdata/nf-core/modules/'
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null
    test_data_base             = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek3'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = true
    validationSchemaIgnoreParams     = 'cf_ploidy,snpeff_db,vep_cache_version,genomes,igenomes_base,input_variantannotation,input_restart_variantannotation'
    validationShowHiddenParams       = false
    validate_params                  = true
}

// Include params for workflows
includeConfig 'nextflow_variantannotation.config'
includeConfig 'nextflow_sarek.config'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/sarek custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/sarek.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/sarek profiles: ${params.custom_config_base}/pipeline/sarek.config")
}

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    // Basic test profile for CI
    test                       { includeConfig 'conf/test.config' }
    test_aws                   {
        includeConfig 'conf/test.config'
        params.sentieon_dnascope_model = "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Sentieon/SentieonDNAscopeModel1.1.model"
    }
    test_azure                 {
        includeConfig 'conf/test.config'
        params.sentieon_dnascope_model = "az://igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Sentieon/SentieonDNAscopeModel1.1.model"
    }
    // Extra test profiles for full tests on AWS
    test_full                  { includeConfig 'conf/test_full.config' }
    test_full_aws              {
        includeConfig 'conf/test_full.config'
    }
    test_full_azure            {
        includeConfig 'conf/test_full.config'
        params.input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/HCC1395_WXS_somatic_full_test_azure.csv'
        params.intervals     = 'az://test-data/sarek/S07604624_Padded_Agilent_SureSelectXT_allexons_V6_UTR.bed'
        params.igenomes_base = "az://igenomes"
    }
    test_full_germline         { includeConfig 'conf/test_full_germline.config' }
    test_full_germline_aws     {
        includeConfig 'conf/test_full_germline.config'
    }
    test_full_germline_azure   {
        includeConfig 'conf/test_full_germline.config'
        params.input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/NA12878_WGS_30x_full_test_azure.csv'
        params.igenomes_base = "az://igenomes"
    }
    test_full_germline_ncbench_agilent {
        includeConfig 'conf/test_full_germline_ncbench_agilent.config'
    }
    spark {
        docker.runOptions        = ''
    }

    // Extra test profiles for more complete CI
    alignment_to_fastq         { includeConfig 'conf/test/alignment_to_fastq.config' }
    annotation                 { includeConfig 'conf/test/annotation.config' }
    markduplicates_bam         { includeConfig 'conf/test/markduplicates_bam.config' }
    markduplicates_cram        { includeConfig 'conf/test/markduplicates_cram.config' }
    no_intervals               { includeConfig 'conf/test/no_intervals.config' }
    pair                       { includeConfig 'conf/test/pair.config' }
    prepare_recalibration_bam  { includeConfig 'conf/test/prepare_recalibration_bam.config' }
    prepare_recalibration_cram { includeConfig 'conf/test/prepare_recalibration_cram.config' }
    recalibrate_bam            { includeConfig 'conf/test/recalibrate_bam.config' }
    recalibrate_cram           { includeConfig 'conf/test/recalibrate_cram.config' }
    save_bam_mapped            { includeConfig 'conf/test/save_bam_mapped.config' }
    sentieon_dedup_bam         { includeConfig 'conf/test/sentieon_dedup_bam.config' }
    sentieon_dedup_cram        { includeConfig 'conf/test/sentieon_dedup_cram.config' }
    skip_bqsr                  { includeConfig 'conf/test/skip_bqsr.config' }
    skip_markduplicates        { includeConfig 'conf/test/skip_markduplicates.config' }
    split_fastq                { includeConfig 'conf/test/split_fastq.config' }
    targeted                   { includeConfig 'conf/test/targeted.config' }
    tools                      { includeConfig 'conf/test/tools.config' }
    tools_germline             { includeConfig 'conf/test/tools_germline.config' }
    tools_somatic              { includeConfig 'conf/test/tools_somatic.config' }
    tools_somatic_ascat        { includeConfig 'conf/test/tools_somatic_ascat.config' }
    tools_tumoronly            { includeConfig 'conf/test/tools_tumoronly.config' }
    trimming                   { includeConfig 'conf/test/trimming.config' }
    umi                        { includeConfig 'conf/test/umi.config' }
    use_gatk_spark             { includeConfig 'conf/test/use_gatk_spark.config' }
    variantcalling_channels    { includeConfig 'conf/test/variantcalling_channels.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
    id 'nf-prov@1.2.2'       // Provenance reports for pipeline runs
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
prov {
    enabled = true
    formats {
        bco {
            file = "${params.outdir}/pipeline_info/manifest_${trace_timestamp}.bco.json"
        }
    }
}

manifest {
    name            = 'nf-core/sarek'
    author          = """Maxime Garcia, Szilveszter Juhos, Friederike Hanssen"""
    homePage        = 'https://github.com/nf-core/sarek'
    description     = """An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '3.5.0dev'
    doi             = '10.12688/f1000research.16665.2, 10.1093/nargab/lqae031, 10.5281/zenodo.3476425'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules/modules.config'

// Load more modules specific config for DSL2 module specific options

// prepare reference
includeConfig 'conf/modules/prepare_genome.config'
includeConfig 'conf/modules/prepare_intervals.config'

// preprocessing
includeConfig 'conf/modules/aligner.config'
includeConfig 'conf/modules/alignment_to_fastq.config'
includeConfig 'conf/modules/markduplicates.config'
includeConfig 'conf/modules/sentieon_dedup.config'
includeConfig 'conf/modules/prepare_recalibration.config'
includeConfig 'conf/modules/recalibrate.config'
includeConfig 'conf/modules/trimming.config'
includeConfig 'conf/modules/umi.config'

//ngscheckmate
includeConfig 'conf/modules/ngscheckmate.config'

// variant calling
includeConfig 'conf/modules/ascat.config'
includeConfig 'conf/modules/cnvkit.config'
includeConfig 'conf/modules/controlfreec.config'
includeConfig 'conf/modules/deepvariant.config'
includeConfig 'conf/modules/freebayes.config'
includeConfig 'conf/modules/haplotypecaller.config'
includeConfig 'conf/modules/joint_germline.config'
includeConfig 'conf/modules/manta.config'
includeConfig 'conf/modules/mpileup.config'
includeConfig 'conf/modules/msisensorpro.config'
includeConfig 'conf/modules/mutect2.config'
includeConfig 'conf/modules/sentieon_dnascope.config'
includeConfig 'conf/modules/sentieon_dnascope_joint_germline.config'
includeConfig 'conf/modules/sentieon_haplotyper.config'
includeConfig 'conf/modules/sentieon_haplotyper_joint_germline.config'
includeConfig 'conf/modules/strelka.config'
includeConfig 'conf/modules/tiddit.config'
includeConfig 'conf/modules/post_variant_calling.config'

// Workflow specific config
includeConfig './workflows/variantannotation/nextflow.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
