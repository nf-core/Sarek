/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

// TNHAPLOTYPER2

process {

    if (params.tools && (params.tools.split(',').contains('sentieon_tnhaplotyper2'))) {
        withName: 'SENTIEON_TNHAPLOTYPER2' {
            ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.tnhaplotyper2" : "${meta.id}.tnhaplotyper2.${intervals.simpleName}" }
            ext.when         = { params.tools && (params.tools.split(',').contains('sentieon_tnhaplotyper2')) }
            // TO-DO: sort out the following options which are options for mutect2
            // ext.args         = { params.ignore_soft_clipped_bases ? "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz" : "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                pattern: "*{vcf.gz,vcf.gz.tbi,stats}",
                saveAs: { meta.num_intervals > 1 ? null : "tnhaplotyper2/${meta.id}/${it}" }
            ]
        }

        // PAIR_VARIANT_CALLING
        withName: 'SENTIEON_TNHAPLOTYPER2_PAIRED' {
            ext.args2       = { params.ignore_soft_clipped_bases ?
                                "--trim_soft_clip --normal_sample ${meta.patient}_${meta.normal_id} --tumor_sample ${meta.patient}_${meta.tumor_id}" :
                                "--normal_sample ${meta.patient}_${meta.normal_id} --tumor_sample ${meta.patient}_${meta.tumor_id}" }
            ext.args3       = { "--tumor_sample ${meta.patient}_${meta.tumor_id}" }
            ext.args4       = { "--normal_sample ${meta.patient}_${meta.normal_id} --tumor_sample ${meta.patient}_${meta.tumor_id}" }
        }

        withName: 'MERGE_TNHAPLOTYPER2.*' {
            ext.prefix       = { "${meta.id}.tnhaplotyper2" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/tnhaplotyper2/${meta.id}" },
                pattern: "*{vcf.gz,vcf.gz.tbi}"
            ]
        }

        withName: 'SENTIEON_TNFILTER' {
            ext.prefix = { "${meta.id}.filtered" }
            ext.args2       = { "--normal_sample ${meta.patient}_${meta.normal_id} --tumor_sample ${meta.patient}_${meta.tumor_id}" }
        }

        // TO-DO: I guess that kind of prefixing with the name of the subworkflow is necessary since the user may request tnhaplotyper2 and mutect2 in the same run.
        // TO-DO: Add a similar prefixing for the mutect2-subworkflow in mutect2.config `
        withName: '.*_SENTIEON_TNHAPLOTYPER2:GATHERPILEUPSUMMARIES.*' {
            ext.prefix       = { "${meta.id}.tnhaplotyper2" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/tnhaplotyper2/${meta.id}/" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*_SENTIEON_TNHAPLOTYPER2:GETPILEUPSUMMARIES.*' {
            ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.tnhaplotyper2" : "${meta.id}.tnhaplotyper2.${intervals.simpleName}" }
            publishDir        = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                pattern: "*.table",
                saveAs: { meta.num_intervals > 1 ? null : "tnhaplotyper2/${meta.id}/${it}" }
            ]
        }

        withName: '.*_SENTIEON_TNHAPLOTYPER2:CALCULATECONTAMINATION' {
            ext.prefix       = { "${meta.id}.tnhaplotyper2" }
            ext.args         = { "-tumor-segmentation ${meta.id}.tnhaplotyper2.segmentation.table" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/tnhaplotyper2/${meta.id}" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        if (params.joint_tnhaplotyper2) {
            withName: '.*_SENTIEON_TNHAPLOTYPER2:CALCULATECONTAMINATION' {
                publishDir       = [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/variant_calling/tnhaplotyper2/${meta.patient}" },
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }

        withName: '.*_SENTIEON_TNHAPLOTYPER2:SENTIEON_TNFILTER.*' {
            ext.prefix       = {"${meta.id}.tnhaplotyper2.filtered"}
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : "tnhaplotyper2/${meta.id}/${filename}" }
            ]
        }

        // TO-DO: If possible, get rid of MERGEMUTECTSTATS in the tnhaplotyper2-subworkflow and use sentieon version instead.
        withName: '.*_SENTIEON_TNHAPLOTYPER2:MERGEMUTECTSTATS' {
            ext.prefix       = { "${meta.id}.tnhaplotyper2" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/tnhaplotyper2/${meta.id}/" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

    }
}
