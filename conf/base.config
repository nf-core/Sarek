/*
 * -------------------------------------------------
 *  nf-core/sarek Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

params {
  // Defaults only, expecting to be overwritten
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 for details
  max_cpus = 16 // Base specifications
  max_memory = 128.GB // Base specifications
  max_time = 240.h // Base specifications
  singleCPUMem = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
  totalMemory = 120.GB
  cpus = 10
}

process {
  cpus = {check_max(params.cpus * task.attempt)}
  memory = {check_max(15.GB * task.attempt)}
  time = {check_max(8.h * task.attempt)}
  shell = ['/bin/bash', '-euo', 'pipefail']

  errorStrategy = {task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish'}
  maxErrors = '-1'
  maxRetries = 3

  withName:AlleleCounter {
    cpus = {check_max(1)}
    memory = {check_max(14.GB * task.attempt)}
  }
  withName:ApplyBQSR {
    cpus = {check_max(2)}
    memory = {check_max(7.GB * 2 * task.attempt)}
    time = {check_max(10.h * task.attempt)}
  }
  withName:Ascat {
    cpus = {check_max(1)}
    memory = {check_max(14.GB * task.attempt)}
  }
  withName:BamQCmapped {
    cpus = {check_max(6)}
    memory = {check_max(70.GB)}
  }
  withName:BamQCrecalibrated {
    cpus = {check_max(6)}
    memory = {check_max(70.GB)}
  }
  withName:BaseRecalibrator {
    cpus = {check_max(16)}
    memory = {check_max(params.totalMemory)}
  }
  withName:BcftoolsStats {
    cpus = {check_max(1)}
  }
  withName:ConcatVCF {
    cpus = {check_max(8)}
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
  withName:ControlFREEC {
    cpus = {check_max(1)}
    memory = {check_max(14.GB * task.attempt)}
  }
  withName:ControlFreecViz {
    cpus = {check_max(1)}
    memory = {check_max(14.GB * task.attempt)}
  }
  withName:ConvertAlleleCounts {
    cpus = {check_max(1)}
    memory = {check_max(14.GB * task.attempt)}
  }
  withName:CreateIntervalBeds {
    cpus = {check_max(2)}
    memory = {check_max(7.GB * 2 * task.attempt)}
    time = {check_max(10.h * task.attempt)}
  }
  withName:FastQCBAM {
    // FastQC is only capable of running one thread per fastq file.
    cpus = {check_max(1)}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:FastQCFQ {
    // FastQC is only capable of running one thread per fastq file.
    cpus = {check_max(2)}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:FreeBayes {
    cpus = {check_max(1)}
    memory = {check_max(8.GB * task.attempt)}
  }
  withName:GatherBQSRReports {
    cpus = {check_max(2)}
    memory = {check_max(7.GB * 2 * task.attempt)}
    time = {check_max(10.h * task.attempt)}
  }
  withName:GenotypeGVCFs {
    cpus = {check_max(1)}
    memory = {check_max(7.GB * task.attempt)}
  }
  withName:GetSoftwareVersions {
    cpus = {check_max(1)}
  }
  withName:HaplotypeCaller {
    cpus = {check_max(1)}
    // Increase memory quadratically
    memory = {check_max(7.GB * 2 * task.attempt)}
    time = {check_max(5.h * task.attempt)}
  }
  withName:Manta {
    cpus = {check_max(20)}
    memory = {check_max(16.GB)}
  }
  withName:MantaSingle {
    cpus = {check_max(20)}
    memory = {check_max(16.GB)}
  }
  withName:MapReads {
    memory = {check_max(60.GB * task.attempt)}
    cpus = {check_max(16)}
  }
  withName:MarkDuplicates {
    cpus = {check_max(8)}
    memory = {check_max(8.GB * task.attempt)}
  }
  withName:MergeBamMapped {
    cpus = {check_max(4)}
    memory = {params.singleCPUMem * task.attempt}
    time = {check_max(5.h * task.attempt)}
  }
  withName:MergeBamRecal {
    cpus = {check_max(4)}
    memory = {params.singleCPUMem * task.attempt}
    time = {check_max(5.h * task.attempt)}
  }
  withName:MergeMpileup {
    cpus = {check_max(4)}
    memory = {params.singleCPUMem * task.attempt}
    time = {check_max(5.h * task.attempt)}
  }
  withName:Mpileup {
    cpus = {check_max(1)}
    memory = {check_max(14.GB * task.attempt)}
  }
  withName:MultiQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:Mutect2 {
    cpus = {check_max(2)}
    memory = {check_max(7.GB * task.attempt)}
    time = {check_max(5.h * task.attempt)}
  }
  withName:SamtoolsStats {
    cpus = {check_max(2)}
    time = {check_max(5.h * task.attempt)}
  }
  withName:Snpeff {
    cpus = {check_max(1)}
  }
  withName:Strelka {
    cpus = {check_max(1)}
    time = {check_max(5.h * task.attempt)}
  }
  withName:StrelkaBP {
    cpus = {check_max(1)}
    time = {check_max(5.h * task.attempt)}
  }
  withName:StrelkaSingle {
    cpus = {check_max(1)}
    time = {check_max(5.h * task.attempt)}
  }
  withName:Vcftools {
    cpus = {check_max(1)}
  }
  withName:VEP {
    cpus = {check_max(4)}
    memory = {check_max (32.GB * task.attempt)}
  }
}
