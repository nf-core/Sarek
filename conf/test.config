/*
========================================================================================
    Nextflow config file for running minimal tests
========================================================================================
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run nf-core/sarek -profile test,<extra_test_profile>,<docker/singularity>

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = '6.GB'
    max_time   = '6.h'

    // Input data
    input = "${baseDir}/tests/csv/3.0/fastq_single.csv"

    // Small reference genome
    igenomes_ignore   = true
    genome            = 'small_hg38'
    genomes_base      = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules'
    snpeff_db         = 'WBcel235.99'
    vep_species       = 'caenorhabditis_elegans'
    vep_cache_version = '104'

    // Ignore `--input` as otherwise the parameter validation will throw an error
    schema_ignore_params = 'genomes,input,modules'
}

profiles {
    annotation {
        params.genome              = 'WBcel235'
        params.igenomes_ignore     = false
        params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-vcf-https.csv'
        params.step                = 'annotate'
    }
    pair {
        params.input               = "${baseDir}/tests/csv/3.0/fastq_pair.csv"
    }
    prepare_recalibration {
        params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-mapped-normal-https.csv'
        params.step                = 'prepare_recalibration'
    }
    save_bam_mapped {
        params.save_bam_mapped     = true
    }
    skip_markduplicates {
        params.skip_markduplicates = true
    }
    split_fastq {
        params.split_fastq         = 1500
    }
    targeted {
        params.target_bed          = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/target.bed'
        params.tools               = 'manta,strelka'
    }
    tool {
        params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-recal-normal-https.csv'
        params.step                = 'variant_calling'
    }
    tool_pair {
        params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-recal-pair-https.csv'
        params.step                = 'variant_calling'
    }
    trimming {
        params.clip_r1             = 1
        params.clip_r2             = 1
        params.three_prime_clip_r1 = 1
        params.three_prime_clip_r2 = 1
        params.trim_fastq          = true
    }
    use_gatk_spark {
        params.use_gatk_spark      = 'bqsr,markduplicates'
    }
    umi_quiaseq {
        params.genome              = 'smallGRCh38'
        params.genomes_base        = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/reference/chr20_hg38'
        params.input               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-umi-qiaseq-https.csv'
        params.read_structure1     = '12M11S+T'
        params.read_structure2     = '12M11S+T'
        params.umi                 = true
    }
    umi_tso {
        genome                     = 'smallGRCh38'
        genomes_base               = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/reference/chr20_hg38'
        input                      = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/tiny-umi-tso-https.csv'
        read_structure1            = '7M1S+T'
        read_structure2            = '7M1S+T'
        umi                        = true
    }
}

process {
    withName:SNPEFF {
        maxForks = 1
    }
    withName:ENSEMBLVEP {
        maxForks = 1
    }
    withName:SEQKIT_SPLIT2{
        publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
