/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.suffix          = File name ext.suffix output files.
----------------------------------------------------------------------------------------
*/

// Generic process options for all workflows
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

// PREPARE_GENOME
process {

    withName: 'BWAMEM1_INDEX' {
        publishDir = [
            path: { "${params.outdir}/reference/bwa" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*{amb,ann,bwt,pac,sa}"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        publishDir = [
            path: { "${params.outdir}/reference/bwamem2" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]

    }
    withName: 'CREATE_INTERVALS_BED' {
        publishDir = [
            path: { "${params.outdir}/reference/intervals" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        publishDir = [
            path: { "${params.outdir}/reference/gatk4" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*dict"
        ]
    }

    withName: 'MSISENSORPRO_SCAN' {
        publishDir = [
            path: { "${params.outdir}/reference/msi" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*list"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}/reference/fai" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_BGZIPTABIX' {
        publishDir = [
            path: { "${params.outdir}/reference/target" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*bed.gz"
        ]
    }

    withName: 'TABIX_DBSNP' {
        publishDir = [
            path: { "${params.outdir}/reference/dbsnp" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        publishDir = [
            path: { "${params.outdir}/reference/germline_resource" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        publishDir = [
            path: { "${params.outdir}/reference/known_indels" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        publishDir = [
            path: { "${params.outdir}/reference/pon" },
            mode: 'copy',
            enabled: "params.save_reference",
            pattern: "*vcf.gz.tbi"
        ]
    }
}

// MAPPING
process {

    withName: "BWA.*MEM_T" {
        ext.args         = '-K 100000000 -M -B 3'
        ext.args2        = 'sort'
        publishDir       = [ enabled: false ]
    }

    withName: "BWA.*MEM" {
        ext.args         = '-K 100000000 -M'
        ext.args2        = 'sort'
        publishDir       = [ enabled: false ]
    }

    withName: 'SAMTOOLS_INDEX' {
        publishDir       = [
            path: { "${params.outdir}/preprocessing/mapped" },
            mode: 'copy',
            enabled: true,
            pattern: "*{bam,bai}"
        ]
    }

    withName: 'SAMTOOLS_MERGE' {
        publishDir       = [ enabled: false ]
    }

    withName: 'SEQKIT_SPLIT2' {
        ext.args         = "--by-size ${params.split_fastq}"
        publishDir       = [ enabled: false ]
    }
}

// Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
// However if it's skipped, reads need to be coordinate-sorted
// Spark can be used also for BQSR, therefore check for both
// Only name sort if Spark for Markduplicates + duplicate marking is not skipped
if (('markduplicates' in params.use_gatk_spark) & (!params.skip_markduplicates)) {
    process {
        withName: "BWA.*_M.*" { ext.args2 = 'sort -n' }
    }
}

// MARKDUPLICATES
process {
    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
        ext.suffix       = '.md'
        publishDir       = [
            path: { "${params.outdir}/preprocessing/markduplicates" },
            mode: 'copy',
            enabled: true,
            pattern: "*{metrics}"
        ]
    }
    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT'
        ext.suffix       = '.md'
        publishDir       = [
            path: { "${params.outdir}/preprocessing/markduplicates" },
            mode: 'copy',
            enabled: false
        ]
    }
    withName: 'GATK4_MARKDUPLICATES_SPARK' {
        ext.args         = '--remove-sequencing-duplicates false -VS LENIENT'
        ext.suffix       = '.md'
        publishDir       = [
            path: { "${params.outdir}/preprocessing/markduplicates" },
            mode: 'copy',
            enabled: true,
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'QUALIMAP_BAMQC' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.suffix       = '.mapped'
        publishDir       = [
            path: { "${params.outdir}/preprocessing/reports/qualimap" },
            mode: 'copy',
            enabled: true
        ]
    }
    withName: 'SAMTOOLS_STATS' {
        publishDir       = [
            path: { "${params.outdir}/preprocessing/reports/samtools_stats" },
            mode: 'copy',
            enabled: true
        ]
    }
    withName: 'SAMTOOLS_BAM_TO_CRAM|SAMTOOLS_BAM_TO_CRAM_SPARK' {
        ext.suffix       = '.md'
        publishDir       = [
            path: { "${params.outdir}/preprocessing/markduplicates" },
            mode: 'copy',
            enabled: true,
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'SAMTOOLS_INDEX' {
        publishDir       = [
            path: { "${params.outdir}/preprocessing/markduplicates" },
            mode: 'copy',
            enabled: true,
            pattern: "*{cram,crai}"
        ]
    }
}

// PREPARE_RECALIBRATION
// withName: 'baserecalibrator' {
//     publishDir       = [
//             // path: { "${params.outdir}/preprocessing'
//     publish_files    = ['recal.table': 'recal_table']
// }
// withName: 'baserecalibrator_spark' {
//     publishDir       = [
//             // path: { "${params.outdir}/preprocessing'
//     publish_files    = ['recal.table': 'recal_table']
// }
// withName: 'gatherbqsrreports' {
//     publishDir       = [
//             // path: { "${params.outdir}/preprocessing'
//     publish_files    = ['recal.table': 'recal_table']
// }

// // RECALIBRATE
// withName: 'applybqsr' {
//     ext.suffix       = '.recal'
//     publish_files    = false
// }
// withName: 'applybqsr_spark' {
//     ext.suffix       = '.recal'
//     publish_files    = false
// }
// withName: 'merge_cram_recalibrate' {
//     ext.suffix       = '.recal'
//     publish_files    = ['cram':'recalibrated']
//     publishDir       = [
//             // path: { "${params.outdir}/preprocessing'
// }
// withName: 'qualimap_bamqc_recalibrate' {
//     ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
//     publishDir       = [
//             // path: { "${params.outdir}/reports/qualimap'
//     ext.suffix       = '.recal'
// }
// withName: 'samtools_index_recalibrate' {
//     ext.suffix       = 'recal'
//     publishDir       = [
//             // path: { "${params.outdir}/preprocessing'
//     publish_files    = ['recal.cram':'recalibrated', 'recal.cram.crai':'recalibrated']
// }
// withName: 'samtools_stats_recalibrate' {
//     publishDir       = [
//             // path: { "${params.outdir}/reports/samtools_stats'
// }

// // GERMLINE_VARIANT_CALLING
// withName: 'haplotypecaller' {
//     ext.args         = '-ERC GVCF'
//     ext.suffix       = '.g'
//     publishDir       = [
//             // path: { "${params.outdir}/variant_calling'
//     publish_files    = false
// }
// withName: 'genotypegvcf' {
//     publishDir       = [
//             // path: { "${params.outdir}/variant_calling'
//     publish_files    = false
// }
// withName: 'concat_haplotypecaller' {
//     ext.suffix       = 'haplotypecaller'
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'haplotypecaller', 'vcf.gz.tbi':'haplotypecaller']
// }
// withName: 'concat_gvcf' {
//     ext.suffix       = 'haplotypecaller_gvcf'
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'haplotypecaller_gvcf', 'vcf.gz.tbi':'haplotypecaller_gvcf']
// }
// withName: 'strelka_germline' {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: 'deepvariant' {
//     ext.args         = '--model_type=WGS'
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = false
// }

// // TUMOR_VARIANT_CALLING

// // PAIR_VARIANT_CALLING
// withName: 'manta_somatic' {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'manta', 'vcf.gz.tbi':'manta']
// }
// withName: 'msisensorpro_msi' {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['list':'msisensorpro']
// }
// withName: 'strelka_somatic' {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: 'strelka_somatic_bp' {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: 'mutect2_somatic' {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'mutect2', 'vcf.gz.tbi':'mutect2']
// }

// ANNOTATE
process {
    withName: ENSEMBLVEP {
        ext.args          = '--everything --filter_common --per_gene --total_length --offline'
        ext.container_tag = { "104.3.${params.genome}" }
    }
    withName: SNPEFF {
        ext.args          = '-nodownload -canon -v'
        ext.container_tag = { "5.0.${params.genome}" }
    }
}

// withName: 'bgziptabix_snpeff' {
//     publishDir       = [
//             path: { "${params.outdir}/annotation'
//     ext.suffix       = '_snpEff.ann'
// }
// withName: 'merge_vep' {
//     ext.args         = '--everything --filter_common --per_gene --total_length --offline'
//     publish_files    = false
// }
// withName: 'bgziptabix_merge_vep' {
//     publishDir       = [
//             path: { "${params.outdir}/annotation'
//     ext.suffix       = '_snpEff_VEP.ann'
// }
// withName: 'ensemblvep' {
//     publish_files    = false
//     tag_base         = '104.3'
// }
// withName: 'bgziptabix_vep' {
//     publishDir       = [
//             path: { "${params.outdir}/annotation'
//     ext.suffix       = '_VEP.ann'
// }

// // QC_TRIM
// withName: 'fastqc' {
//     ext.args         = '--quiet'
//     publishDir       = [
//             path: { "${params.outdir}/reports/fastqc'
// }
// withName: 'trimgalore' {
//     ext.args         = '--fastqc'
//     publishDir       = [
//             path: { "${params.outdir}/trimgalore'
// }
// withName: 'multiqc' {
//     ext.args         = ''
// }

// // OTHERS
// withName: 'get_software_versions' {
//     publishDir       = [
//             path: { "${params.outdir}/pipeline_info'
// }
