/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.suffix          = File name ext.suffix output files. Not available for nf-core modules
        ext.prefix          = File name ext.prefix output files.
----------------------------------------------------------------------------------------
*/

// Generic process options for all workflows
process {
    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/pipeline_info" },
            pattern: '*_versions.yml'
        ]
    }
}

// PREPARE_GENOME
process {

    withName: 'BWAMEM1_INDEX' {
        publishDir = [
            enabled: "${params.save_reference}",
            path: { "${params.outdir}/reference/bwa" },
            pattern: "*{amb,ann,bwt,pac,sa}"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/bwamem2" },
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]

    }
    withName: 'CREATE_INTERVALS_BED' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/gatk4" },
            pattern: "*dict"
        ]
    }

    withName: 'MSISENSORPRO_SCAN' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/msi" },
            pattern: "*list"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_BGZIPTABIX' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/target" },
            pattern: "*bed.gz"
        ]
    }

    withName: 'TABIX_DBSNP' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        publishDir = [
            enabled: "${params.save_reference}",
            mode: 'copy',
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }
}

// MAPPING
process {

    withName: "BWA.*MEM" {
        ext.args         = { meta.status == 1 ? '-K 100000000 -M -B 3' : '-K 100000000 -M' }
        ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat(reads.get(0).name.findAll(/part_([0-9]+)?/).last().concat('.')) : "${meta.id}" }
        publishDir = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/bwa" },
            pattern: "*{bam,bai}"
        ]

    }

    withName: 'INDEX_MAPPING' {
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/mapped" },
            pattern: "*{bam,bai}"
        ]
    }

    withName: 'SAMTOOLS_MERGE' {
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/merge" },
            pattern: "*{bam,bai,cram,crai}"
        ]
    }

    withName: 'SEQKIT_SPLIT2' {
        ext.args         = { "--by-size ${params.split_fastq}" }
        publishDir       = [ enabled: false ]
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/reads" },
            pattern: "*gz"
        ]
    }
}

// Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
// However if it's skipped, reads need to be coordinate-sorted
// Spark can be used also for BQSR, therefore check for both
// Only name sort if Spark for Markduplicates + duplicate marking is not skipped
if (('markduplicates' in params.use_gatk_spark) && (!params.skip_markduplicates)) {
    process {
        withName: "BWA.*_MEM" { ext.args2 = '-n' }
    }
}

// MARKDUPLICATES
process {
    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
        ext.suffix       = '.md'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{metrics}"
        ]
    }
    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT'
        ext.suffix       = '.md'
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" }
        ]
    }
    withName: 'GATK4_MARKDUPLICATES_SPARK' {
        ext.args         = '--remove-sequencing-duplicates false -VS LENIENT'
        ext.suffix       = '.md'
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'QUALIMAP_BAMQC' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.suffix       = '.mapped'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/reports/qualimap/${meta.id}" }
        ]
    }
    withName: 'SAMTOOLS_STATS' {
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" }
        ]
    }
    withName: 'SAMTOOLS_BAM_TO_CRAM|SAMTOOLS_BAM_TO_CRAM_SPARK' {
        ext.suffix       = '.md'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
    withName: 'INDEX_MARKDUPLICATES' {
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }
}

// PREPARE_RECALIBRATION
process {
    withName: 'BASERECALIBRATOR|BASERECALIBRATOR_SPARK|GATHERBQSRREPORTS' {
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/recal_table" },
            pattern: "*recal.table"
        ]
    }
}

// RECALIBRATE
process {
    withName: 'APPLYBQSR|APPLYBQSR_SPARK' {
        ext.suffix       = '.recal'
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*cram"
        ]
    }
    withName: 'SAMTOOLS_MERGE_CRAM' {
        ext.suffix       = '.recal'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*cram"
        ]
    }
    withName: 'QUALIMAP_BAMQC_CRAM' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.suffix       = '.recal'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/reports/qualimap/${meta.id}" }
        ]
    }
    withName: 'INDEX_RECALIBRATE' {
        ext.suffix       = 'recal'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*{recal.cram,recal.cram.crai}"
        ]
    }
    withName: 'SAMTOOLS_STATS' {
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" }
        ]
    }
}

// GERMLINE_VARIANT_CALLING
process {
    withName: HAPLOTYPECALLER {
        ext.args         = '-ERC GVCF'
        ext.suffix       = '.g'
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: GENOTYPEGVCF {
        ext.suffix       = '.first_pass'
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: CONCAT_HAPLOTYPECALLER {
        ext.suffix       = '.haplotypecaller'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: CONCAT_GVCF {
        ext.suffix       = '.haplotypecaller_gvcf'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller_gvcf"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: STRELKA_GERMLINE {
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/variant_calling/${meta.id}/strelka"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: DEEPVARIANT {
        ext.args         = '--model_type=WGS'
        publishDir       = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/variant_calling/${meta.id}/strelka"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
}

// // TUMOR_VARIANT_CALLING

// // PAIR_VARIANT_CALLING
// withName: manta_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'manta', 'vcf.gz.tbi':'manta']
// }
// withName: msisensorpro_msi {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['list':'msisensorpro']
// }
// withName: strelka_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: strelka_somatic_bp {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'strelka', 'vcf.gz.tbi':'strelka']
// }
// withName: mutect2_somatic {
//     publishDir       = [
//             path: { "${params.outdir}/variant_calling'
//     publish_files    = ['vcf.gz':'mutect2', 'vcf.gz.tbi':'mutect2']
// }

// ANNOTATE
process {

    withName: 'ENSEMBLVEP' {
        ext.args          = '--everything --filter_common --per_gene --total_length --offline'
        ext.container_tag = { "104.3.${params.genome}" }
        container         = { "nfcore/vep:104.3.${params.genome}" }
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/annotation/${meta.id}/ensemblvep"}
        ]
        publishDir        = [ enabled: false ]
    }

    withName: 'SNPEFF' {
        ext.args          = '-nodownload -canon -v'
        ext.container_tag = { "5.0.${params.genome}" }
        container         = { "nfcore/snpeff:5.0.${params.genome}" }
        publishDir       = [
            enabled: false,
            mode: 'copy',
            path: { "${params.outdir}/annotation/${meta.id}/snpeff"}
        ]
        publishDir        = [ enabled: false ]
    }

    withName: 'ANNOTATION_BGZIPTABIX' {
        publishDir       = [
                enable: false,
                path: { "${params.outdir}/annotation/${meta.id}" },
                pattern: "*{gz,gz.tbi}"
        ]
    }

}

if ((params.tools) && (params.tools.contains('snpeff') || params.tools.contains('merge'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_SNPEFF:ANNOTATION_BGZIPTABIX' {
            ext.prefix = {"${meta.id}_snpEff.ann.vcf"}
        }
    }
}

if ((params.tools) && (params.tools.contains('vep'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_ENSEMBLVEP:ANNOTATION_BGZIPTABIX' {
            ext.prefix = {"${meta.id}_VEP.ann.vcf"}
        }
    }
}

if ((params.tools) && (params.tools.contains('merge'))) {
    process {
        withName: 'NFCORE_SAREK:SAREK:ANNOTATE:MERGE_ANNOTATE:ANNOTATION_BGZIPTABIX' {
            ext.prefix = {"${meta.id}_snpEff_VEP.ann.vcf"}
        }
    }
}

// QC_TRIM
process {
    withName: 'FASTQC' {
        ext.args         = '--quiet'
        publishDir = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/reports/fastqc/${meta.id}" }
        ]
    }
    withName: 'TRIMGALORE' {
        ext.args         = '--fastqc'
        publishDir = [
            enabled: true,
            mode: 'copy',
            path: { "${params.outdir}/trimgalore/${meta.id}" }
        ]
    }
    // withName: 'MULTIQC' {
    //     ext.args         = ''
    //    publishDir = [
    //        enabled: true,
    //        mode: 'copy',
    //        path: { "${params.outdir}/trimgalore/${meta.id}" }
    //    ]
    // }
}
