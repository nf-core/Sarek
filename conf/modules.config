/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

process {

    publishDir           = [
        mode: params.publish_dir_mode,
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/pipeline_info" },
            pattern: '*_versions.yml'
        ]
    }

// PREPARE_GENOME

    withName: 'BWAMEM1_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwa"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem2" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwamem2"
        ]
    }

    withName: 'DRAGMAP_HASHTABLE' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "dragmap" }
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "dragmap"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict && params.step != "annotate" && params.step != "controlfreec" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/gatk4" },
            pattern: "*dict"
        ]
    }

    withName: 'MSISENSORPRO_SCAN' {
        ext.when         = { params.tools && params.tools.contains('msisensorpro') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/msi" },
            pattern: "*list"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai && params.step != "annotate" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp && (params.step == "mapping" || params.step == "markduplicates" || params.step == "prepare_recalibration") || params.tools && (params.tools.contains('controlfreec') || params.tools.contains('haplotypecaller') || params.tools.contains('mutect2')) }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels && (params.step == 'mapping' || params.step == "markduplicates" || params.step == 'prepare_recalibration') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon && params.tools && params.tools.contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }

// PREPARE INTERVALS

    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'TABIX_BGZIPTABIX' {
        ext.prefix       = {"${meta.id}.bed"}
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/target" },
            pattern: "*bed.gz"
        ]
    }

// BAM TO FASTQ

    withName: 'COLLATE_FASTQ_MAP'{
        ext.args2        = '-N'
        ext.prefix       = {"${meta.id}.mapped"}
    }

    withName: 'COLLATE_FASTQ_UNMAP'{
        ext.args2        = '-N'
        ext.prefix       = {"${meta.id}.unmapped"}
    }

    withName: 'SAMTOOLS_VIEW_MAP_MAP' {
        ext.args         = '-b -f1 -F12'
        ext.prefix       = {"${meta.id}.map_map"}
    }

    withName: 'SAMTOOLS_VIEW_MAP_UNMAP' {
        ext.args         = '-b -f8 -F260'
        ext.prefix       = {"${meta.id}.map_unmap"}
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_MAP' {
        ext.args         = '-b -f4 -F264'
        ext.prefix       = {"${meta.id}.unmap_map"}
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_UNMAP' {
        ext.args         = '-b -f12 -F256'
        ext.prefix       = {"${meta.id}.unmap_unmap"}
    }

// TRIMMING
    withName: 'TRIMGALORE' {
        ext.args         = '--fastqc'
        publishDir       = [
            [
                path: { "${params.outdir}/reports/trimgalore/${meta.id}/fastqc" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ],
            [
                path: { "${params.outdir}/trimgalore/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*fq.gz"
            ],
            [
                path: { "${params.outdir}/reports/trimgalore/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*txt"
            ]
        ]
    }

// UMI Subworkflow

    withName: 'BAM2FASTQ' {
        ext.args         = '-T RX'
        ext.when         = { umi_read_structure }
    }

    withName: 'CALLUMICONSENSUS' {
        ext.args         = '-M 1 -S Coordinate'
        ext.prefix       = {"${meta.id}_umi-consensus"}
    }

    withName: "NFCORE_SAREK:SAREK:CREATE_UMI_CONSENSUS:MAPPING_UMI:BWAMEM.*_MEM" {
        ext.args         = { "-p -C -M -R ${meta.read_group}" }
        ext.args2        = '-bS'
        ext.prefix       = {"${meta.id}.umi_unsorted"}
    }

    withName: 'SAMBLASTER' {
        ext.args         = '-M --addMateTags'
        ext.prefix       = {"${meta.id}_unsorted_tagged"}
    }

// SPLIT FASTQ

    withName: 'SEQKIT_SPLIT2' {
        ext.args         = { "--by-size ${params.split_fastq}" }
        ext.when         = { params.split_fastq > 1 }
        publishDir       = [
            enabled: params.save_split_fastqs,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.sample}/seqkit" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

// MAPPING

    withName: ".*GATK4_MAPPING:BWAMEM1_MEM" {
        ext.when         = { params.aligner == "bwa-mem" }
    }
    withName: ".*GATK4_MAPPING:BWAMEM2_MEM" {
        ext.when         = { params.aligner == "bwa-mem2" }
    }

    withName: ".*GATK4_MAPPING:DRAGMAP_ALIGN" {
        ext.when         = { params.aligner == "dragmap" }
        ext.args         = { "--RGSM ${meta.read_group}" }

    }

    withName: "NFCORE_SAREK:SAREK:GATK4_MAPPING:(BWAMEM.*_MEM|DRAGMAP_ALIGN)" {
        // Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
        // However if it's skipped, reads need to be coordinate-sorted
        // Only name sort if Spark for Markduplicates + duplicate marking is not skipped
        ext.args2        = { params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') && (!params.skip_tools || (params.skip_tools && !params.skip_tools.contains('markduplicates'))) ? '-n' : '' }
        ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.findAll(/part_([0-9]+)?/).last()) : "" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/mapped" },
            pattern: "*bam",
            saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? it : null }
        ]
    }

    withName: "NFCORE_SAREK:SAREK:GATK4_MAPPING:BWAMEM.*_MEM" {
        // Using -B 3 for tumor samples
        ext.args         = { meta.status == 1 ? "-K 100000000 -M -B 3 -R ${meta.read_group}" : "-K 100000000 -M -R ${meta.read_group}" }
    }

    withName: 'MERGE_BAM|INDEX_MERGE_BAM' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/mapped" },
            pattern: "*{bam,bai}"
        ]
    }

// MARKDUPLICATES

    withName: 'SAMTOOLS_CRAMTOBAM'{
        ext.args = "-b"
    }

    withName: 'SAMTOOLS_BAMTOCRAM.*' {
        // BAM provided for step Markduplicates either run through MD or Convert -> then saved as md.cram
        // BAM files provided for step prepare_recal are converted and run through BQSR -> then saved as md.cram
        // BAM files provided for step recal are converted and run through BQSR II -> then saved as md.cram
        ext.args = "-C"
        ext.prefix       = { "${meta.id}.md" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: 'SAMTOOLS_BAMTOCRAM_VARIANTCALLING' {
        ext.prefix       = { "${meta.id}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY|GATK4_MARKDUPLICATES' {
        ext.prefix       = { "${meta.id}.md" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/markduplicates/${meta.id}" },
            pattern: "*metrics"
        ]
    }

    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('markduplicates_report')) }
    }

    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
    }

    withName: 'GATK4_MARKDUPLICATES_SPARK' {
        ext.args         = '--remove-sequencing-duplicates false -VS LENIENT'
        ext.prefix       = { !(params.skip_tools && (params.skip_tools.contains('bamqc') || params.skip_tools.contains('deeptools'))) ? "${meta.id}.md.bam" : "${meta.id}.md.cram" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: 'GATK4_MARKDUPLICATES' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('markduplicates')) }
    }

    withName: 'INDEX_MARKDUPLICATES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/markduplicates" },
            pattern: "*{cram,crai}"
        ]
    }

// PREPARE_RECALIBRATION

    withName: 'BASERECALIBRATOR|BASERECALIBRATOR_SPARK' {
        ext.prefix       = {"${meta.id}.recal"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recal_table" },
            pattern: "*table",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    withName: 'GATHERBQSRREPORTS' {
        ext.prefix       = {"${meta.id}.recal"}
        ext.when         = { meta.num_intervals > 1 }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recal_table" },
            pattern: "*table",
        ]
    }

// RECALIBRATE

    withName: 'APPLYBQSR|APPLYBQSR_SPARK' {
        ext.prefix       = {"${meta.id}.recal"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*cram",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:(RECALIBRATE|RECALIBRATE_SPARK):MERGE_INDEX_CRAM:MERGE_CRAM' {
        ext.prefix       = { "${meta.id}.recal" }
        ext.when         = { meta.num_intervals > 1 }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*cram"
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:(RECALIBRATE|RECALIBRATE_SPARK):MERGE_INDEX_CRAM:INDEX_CRAM' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/${meta.id}/recalibrated" },
            pattern: "*{recal.cram,recal.cram.crai}"
        ]
    }

// QC

    withName: 'FASTQC' {
        errorStrategy    = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args         = '--quiet'
        publishDir       = [
            [
                path: { "${params.outdir}/reports/fastqc/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    withName: 'SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('samtools')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DEEPTOOLS_BAMCOVERAGE' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('deeptools')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/deeptools/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUALIMAP_BAMQCCRAM' {
        ext.args         = '--paint-chromosome-limits --genome-gc-distr HUMAN -skip-duplicated --skip-dup-mode 0 -outformat HTML'
        ext.prefix       = { "${meta.id}.mapped" }
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('bamqc')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/qualimap/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:CRAM_QC:QUALIMAP_BAMQCCRAM' {
        ext.prefix       = { "${meta.id}.recal" }
    }

    withName: 'NFCORE_SAREK:SAREK:CRAM_QC:SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('samtools')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// VARIANT CALLING
process{
    // ALL
    withName: 'CONCAT_.*' {
        // For unknown reasons, CONCAT_VCF sometimes fails with SIGPIPE
        // (exit code 141). Rerunning the process will usually work.
        errorStrategy   = {task.exitStatus == 141 ? 'retry' : 'terminate'}
        ext.args         = { params.no_intervals ?  "-n" : "" } //Why ConcatVCF is never run when no_intervals is set..
    }
    withName : 'BGZIP_VC_.*' {
        publishDir       = [
            enabled: false
        ]
    }

    // DEEPVARIANT
    withName: 'CONCAT_DEEPVARIANT_.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/deepvariant" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'CONCAT_DEEPVARIANT_GVCF' {
        ext.prefix       = {"${meta.id}.g"}
    }
    withName: 'DEEPVARIANT' {
        ext.args         = { params.wes ?  "--model_type WES" : "--model_type WGS" }
        ext.when         = { params.tools && params.tools.contains('deepvariant') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/deepvariant" },
            pattern: "*vcf.gz",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }
    withName : 'TABIX_VC_DEEPVARIANT_.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/deepvariant" },
            pattern: "*tbi"
        ]
    }

    // FREEBAYES
    withName: 'CONCAT_FREEBAYES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/freebayes" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'FREEBAYES' {
        ext.prefix       = {"${meta.id}.freebayes"} //To make sure no naming conflicts ensue with module BCFTOOLS_SORT & the naming being correct in the output folder
        ext.args         = '--min-alternate-fraction 0.1 --min-mapping-quality 1'
        ext.when         = { params.tools && params.tools.contains('freebayes') }
        publishDir       = [
            enabled: false
        ]
    }

    withName: 'BCFTOOLS_SORT' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/freebayes" },
            pattern: "*vcf.gz",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    withName : 'TABIX_VC_FREEBAYES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/freebayes" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // HAPLOTYPECALLER
    withName: 'CONCAT_HAPLOTYPECALLER' {
        ext.prefix       = {"${meta.id}.g"}
        publishDir       = [
            enabled: !params.no_intervals,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HAPLOTYPECALLER' {
        ext.args         = { params.joint_germline ? "-ERC GVCF" : "" }
        ext.prefix       = {"${meta.id}.g"}
        ext.when         = { params.tools && params.tools.contains('haplotypecaller') }
        publishDir       = [
            enabled: params.no_intervals,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'GENOTYPEGVCFS' {
        ext.when         = { params.tools && params.tools.contains('haplotypecaller') && params.joint_germline}
        publishDir       = [
            enabled: params.generate_gvcf,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    // MANTA
    withName: 'CONCAT_MANTA.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/manta" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'CONCAT_MANTA_DIPLOID' {
        ext.prefix       = {"${meta.id}.diploid_sv"}
    }
    withName: 'CONCAT_MANTA_SMALL_INDELS' {
        ext.prefix       = {"${meta.id}.candidate_small_indels"}
    }
    withName: 'CONCAT_MANTA_SV' {
        ext.prefix       = {"${meta.id}.candidate_sv"}
    }
    withName: 'MANTA.*' {
        ext.args         = { params.wes ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.contains('manta') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/manta" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    // STRELKA
    withName: 'CONCAT_STRELKA.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/strelka" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'CONCAT_STRELKA' {
        ext.prefix       = {"${meta.id}.variants"}
    }
    withName: 'CONCAT_STRELKA_GENOME' {
        ext.prefix       = {"${meta.id}.genome"}
    }
    withName: 'STRELKA_.*' {
        ext.args         = { params.wes ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.contains('strelka') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/strelka" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    // withName: 'TIDDIT_SV' {
    //     publishDir       = [
    //         mode: params.publish_dir_mode,
    //         path: { "${params.outdir}/variant_calling/${meta.id}/tiddit" }
    //     ]
    // }

// TUMOR_VARIANT_CALLING

    //CONTROLFREEC
    withName: 'ASSESS_SIGNIFICANCE' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/controlfreec" },
            pattern: "*{.p.value.txt}"
        ]
    }

    withName: 'CAT_MPILEUP.*' {
        ext.when =  { meta.num_intervals > 1 }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/controlfreec" },
            pattern: "*mpileup"
        ]
    }

    withName: 'FREEC_.*' {
        ext.when         = { params.tools && params.tools.contains('controlfreec') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/controlfreec" },
            pattern: "*{BedGraph,cpn,txt,_CNVs}"
        ]
    }

    withName: 'FREEC_TUMORONLY'{
        ext.args = {[
                    "sample":[
                        inputformat: 'pileup',
                        mateorientation: 'FR'
                    ],
                    "general" :[
                        bedgraphoutput: "TRUE",
                        breakpointthreshold: params.wes ? "1.2" : "0.8", //Values taken from Freec example configs
                        breakpointtype: params.wes ? "4" : "2", // Values taken from Freec example configs
                        coefficientofvariation: params.cf_coeff,
                        contamination: params.cf_contamination ?: "",
                        contaminationadjustment: params.cf_contamination_adjustment ? "TRUE" : "",
                        forcegccontentnormalization: params.wes ? "1" : "0",
                        minimalsubclonepresence: params.wes ? "30" : "20",
                        noisydata: params.wes ? "TRUE" : "FALSE",
                        ploidy: params.ploidy,
                        printNA:  params.wes ? "FALSE" : "TRUE",
                        readcountthreshold:  params.wes ? "50" : "10",
                        sex: meta.gender,
                        //uniquematch: not set
                        window: params.cf_window ?: ""
                        ],
                    "BAF":[
                        minimalcoverageperposition: params.cf_mincov ?: "",
                        minimalqualityperposition: params.cf_minqual ?: "",
                        //"shiftinquality": (optional)not set
                    ]
                ]
            }
    }

    withName: 'FREEC2BED' {
        ext.args = { "${params.ploidy}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/controlfreec" },
            pattern: "*bed"
        ]
    }

    withName: 'FREEC2CIRCOS' {
        ext.args = { "${params.ploidy}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/controlfreec" },
            pattern: "*circos.txt"
        ]
    }

    withName: 'MAKEGRAPH' {
        ext.args = { "${params.ploidy}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/controlfreec" },
            pattern: "*png"
        ]
    }

    withName: 'MPILEUP_.*' {
        ext.when         = { params.tools && params.tools.contains('controlfreec') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/controlfreec" },
            pattern: "*mpileup",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    //MANTA
    withName: 'CONCAT_MANTA_TUMOR' {
        ext.prefix       = {"${meta.id}.tumor_sv"}
    }

    //MUTECT2
    withName: 'CALCULATECONTAMINATION' {
        ext.args         = { "-tumor-segmentation ${meta.id}.segmentation.table" }
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CONCAT_MUTECT2.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: 'FILTERMUTECTCALLS.*'{
        ext.prefix       = {"${meta.id}.filtered"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATHERPILEUPSUMMARIES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATHERPILEUPSUMMARIES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATHERPILEUPSUMMARIES_.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.tumor_id}_vs_${meta.normal_id}/mutect2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GETPILEUPSUMMARIES.*' {
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            pattern: "*.table",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    withName: 'LEARNREADORIENTATIONMODEL'{
        ext.prefix       = { "${meta.id}.artifactprior" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERGEMUTECTSTATS' {
        ext.prefix       = { "${meta.id}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MUTECT2'{
        ext.when         = { params.tools && params.tools.contains('mutect2') }
        ext.args         = { params.ignore_soft_clipped_bases ? "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${meta.id}.f1r2.tar.gz" : "--f1r2-tar-gz ${meta.id}.f1r2.tar.gz" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mutect2" },
            pattern: "*{vcf.gz,vcf.gz.tbi,stats}",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

// PAIR_VARIANT_CALLING

    //ASCAT
    withName: 'ASCAT' {
        ext.args = {
            [
            "gender": meta.sex,
            //"genomeVersion": "hg19"
            //"purity": (optional),
            //"ploidy": params.ploidy,
            //"gc_files": (optional),
            //"minCounts": (optional),
            //"chrom_names": (optional),
            //"min_base_qual": (optional),
            //"min_map_qual": (optional),
            //"ref_fasta": (optional),
            //"skip_allele_counting_tumour": (optional),
            //"skip_allele_counting_normal": (optional)
            ]
        }
    }

    //CONTROLFREEC
    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:RUN_MPILEUP_NORMAL:MPILEUP' {
        ext.prefix = { "${meta.id}.normal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mpileup" },
            pattern: "*{mpileup}",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:RUN_MPILEUP_TUMOR:MPILEUP' {
        ext.prefix = { "${meta.id}.tumor" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mpileup" },
            pattern: "*{mpileup}",
            saveAs: { meta.num_intervals > 1 ? null : it }
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:RUN_MPILEUP_NORMAL:CAT_MPILEUP' {
        ext.prefix = { "${meta.id}.normal.mpileup" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mpileup" },
            pattern: "*{mpileup}",
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:RUN_MPILEUP_TUMOR:CAT_MPILEUP' {
        ext.prefix = { "${meta.id}.tumor.mpileup" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/mpileup" },
            pattern: "*{mpileup}",
        ]
    }

    withName: 'FREEC_SOMATIC'{
        ext.args = {[
                    "sample":[
                        inputformat: 'pileup',
                        mateorientation: 'FR'
                    ],
                    "control":[
                        inputformat: "pileup",
                        mateorientation: "FR"
                    ],
                    "general" :[
                        bedgraphoutput: "TRUE",
                        breakpointthreshold: params.wes ? "1.2" : "0.8", //Values taken from Freec example configs
                        breakpointtype: params.wes ? "4" : "2", // Values taken from Freec example configs
                        coefficientofvariation: params.cf_coeff,
                        contamination: params.cf_contamination ?: "",
                        contaminationadjustment: params.cf_contamination_adjustment ? "TRUE" : "",
                        forcegccontentnormalization: params.wes ? "1" : "0",
                        minimalsubclonepresence: params.wes ? "30" : "20",
                        noisydata: params.wes ? "TRUE" : "FALSE",
                        ploidy: params.ploidy,
                        printNA:  params.wes ? "FALSE" : "TRUE",
                        readcountthreshold:  params.wes ? "50" : "10",
                        sex: meta.gender,
                        //uniquematch: not set
                        window: params.cf_window ?: ""
                        ],
                    "BAF":[
                        minimalcoverageperposition: params.cf_mincov ?: "",
                        minimalqualityperposition: params.cf_minqual ?: "",
                        //"shiftinquality": (optional)not set
                    ]
                ]
            }
    }

    //FREEBAYES
    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:RUN_FREEBAYES_SOMATIC:FREEBAYES' {
        ext.args = "--pooled-continuous \
                    --pooled-discrete \
                    --genotype-qualities \
                    --report-genotype-likelihood-max \
                    --allele-balance-priors-off \
                    --min-alternate-fraction 0.03 \
                    --min-repeat-entropy 1 \
                    --min-alternate-count 2 "
    }

    //MANTA
    withName: 'CONCAT_MANTA_SOMATIC' {
        ext.prefix       = {"${meta.id}.somatic_sv"}
    }

    //MUTECT2

    withName: 'NFCORE_SAREK:SAREK:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MUTECT2' {
        ext.args         = { params.ignore_soft_clipped_bases ?
                            "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${meta.id}.f1r2.tar.gz --normal-sample ${meta.patient}_${meta.normal_id}" :
                            "--f1r2-tar-gz ${meta.id}.f1r2.tar.gz --normal-sample ${meta.patient}_${meta.normal_id}" }
    }

    //MSISENSORPRO
    withName: 'MSISENSORPRO_MSI_SOMATIC' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.id}/msisensorpro" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //STRELKA
    withName: 'CONCAT_STRELKA_INDELS' {
        ext.prefix       = {"${meta.id}.somatic_indels"}
    }
    withName: 'CONCAT_STRELKA_SNVS' {
        ext.prefix       = {"${meta.id}.somatic_snvs"}
    }

    // VCF QC
    withName: 'BCFTOOLS_STATS'{
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('bcftools')) }
        ext.prefix       = { "${meta.variantcaller}_${vcf.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/bcftools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_.*'{
        ext.when         = { !(params.skip_tools && params.skip_tools.contains('vcftools')) }
        ext.prefix       = { "${meta.variantcaller}_${variant_file.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vcftools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_TSTV_COUNT'{
        ext.args         = "--TsTv-by-count"
    }

    withName: 'VCFTOOLS_TSTV_QUAL'{
        ext.args         = "--TsTv-by-qual"
    }

    withName: 'VCFTOOLS_SUMMARY'{
        ext.args         = "--FILTER-summary"
    }

// ANNOTATE

    withName: 'ENSEMBLVEP' {
        ext.args          = [
            '--everything --filter_common --per_gene --total_length --offline',
            (params.vep_dbnsfp && params.dbnsfp)                                  ? '--plugin dbNSFP,dbNSFP.gz,rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF' : '',
            (params.vep_loftee)                                                   ? '--plugin LoF,loftee_path:/opt/conda/envs/nf-core-vep-104.3/share/ensembl-vep-104.3-0'                                      : '',
            (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? '--plugin SpliceAI,snv=spliceai_scores.raw.snv.hg38.vcf.gz,indel=spliceai_scores.raw.indel.hg38.vcf.gz'                     : '',
            (params.vep_spliceregion)                                             ? '--plugin SpliceRegion'                                                                                                     : ''
        ].join(' ').trim()
        if (!params.vep_cache)    container = { params.vep_genome ? "nfcore/vep:104.3.${params.vep_genome}" : "nfcore/vep:104.3.${params.genome}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/EnsemblVEP/${meta.id}/${meta.variantcaller}" },
            pattern: "*html"
        ]
    }

    withName: ".*:ANNOTATION_MERGE:ENSEMBLVEP" {
        ext.prefix       = {"${meta.id}_snpEff"}
    }

    withName: 'SNPEFF' {
        ext.args          = '-nodownload -canon -v'
        if (!params.snpeff_cache) container = { params.snpeff_genome ? "nfcore/snpeff:5.0.${params.snpeff_genome}" : "nfcore/snpeff:5.0.${params.genome}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/SnpEff/${meta.id}/${meta.variantcaller}" },
            pattern: "*csv",
            saveAs: { params.tools.contains('snpeff') ? it : null }
        ]
    }

    withName: "NFCORE_SAREK:SAREK:ANNOTATE:.*:TABIX_BGZIPTABIX" {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/${meta.variantcaller}" },
                pattern: "*{gz,gz.tbi}"
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_SNPEFF:TABIX_BGZIPTABIX' {
        ext.prefix       = {"${meta.id}_snpEff.ann.vcf"}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/annotation/${meta.id}/${meta.variantcaller}" },
            pattern: "*{gz,gz.tbi}",
            saveAs: { params.tools.contains('snpeff') ? it : null }
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_ENSEMBLVEP:TABIX_BGZIPTABIX' {
        ext.prefix       = {"${meta.id}_VEP.ann.vcf"}
    }

    withName: 'NFCORE_SAREK:SAREK:ANNOTATE:ANNOTATION_MERGE:TABIX_BGZIPTABIX' {
        ext.prefix       = {"${meta.id}_snpEff_VEP.ann.vcf"}
    }

    // MULTIQC

    withName:'MULTIQC' {
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args = { params.multiqc_config ? "--config $multiqc_custom_config" : "" }
    }
}
